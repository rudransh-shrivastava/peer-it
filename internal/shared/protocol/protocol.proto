syntax = "proto3";

package protocol;

option go_package = "github.com/rudransh-shrivastava/peer-it/internal/shared/protocol";

message NetworkMessage {
    oneof message_type {
        AnnounceMessage announce = 1;
        PeerListRequest peer_list_request = 2;
        PeerListResponse peer_list_response = 3;
        HeartbeatMessage heartbeat = 4;
        GoodbyeMessage goodbye = 5;
        RegisterMessage register = 6;
        ChunkRequest chunk_request = 7;
        ChunkResponse chunk_response = 8;
        IntroductionMessage introduction = 9;
        SignalRegisterMessage signal_register = 10;
        SignalDownloadMessage signal_download = 11;
    }
}

message AnnounceMessage {
    repeated FileInfo files = 1;
}

message PeerListRequest {
    string file_hash = 1;
}

message PeerListResponse {
    string file_hash = 1;
    int32 total_chunks = 2;
    int32 chunk_size = 3;
    repeated PeerInfo peers = 4;
}

message HeartbeatMessage {
    int64 timestamp = 1;
}

// No fields are required for this message
// If recieved by anyone, delete that peer from the peer list
message GoodbyeMessage {}

message RegisterMessage {
    string public_ip_address = 1;
    string listen_port = 2;
    string client_id = 3;
}

// Peer to Peer Msgs

message ChunkRequest {
    string file_hash = 1;
    int32 chunk_index = 2;
    string chunk_hash = 3;
}

message ChunkResponse {
    string file_hash = 1;
    int32 chunk_index = 2;
    bytes chunk_data = 3;
    string chunk_hash = 4;
}


// chunks_map: Vector of 0's and 1's signifying which chunks the peer has according to the index
message IntroductionMessage {
    string file_hash = 1;
    repeated int32 chunks_map = 2;
}

// Helper Msgs
message PeerInfo {
    string ip_address = 1;
    string port = 2;
}

message FileInfo {
    string file_hash = 1;
    int64 file_size = 2;
    int32 total_chunks = 3;
    int32 chunk_size = 4;
}

message SignalRegisterMessage {
    string file_path = 1;
}

message SignalDownloadMessage {
    string file_hash = 1;
}