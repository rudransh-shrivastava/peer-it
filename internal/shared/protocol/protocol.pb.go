// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: internal/shared/protocol/protocol.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*NetworkMessage_Announce
	//	*NetworkMessage_PeerListRequest
	//	*NetworkMessage_PeerListResponse
	//	*NetworkMessage_Heartbeat
	//	*NetworkMessage_Goodbye
	//	*NetworkMessage_ChunkRequest
	//	*NetworkMessage_ChunkResponse
	//	*NetworkMessage_Introduction
	//	*NetworkMessage_SignalRegister
	//	*NetworkMessage_SignalDownload
	//	*NetworkMessage_Signaling
	//	*NetworkMessage_Id
	//	*NetworkMessage_Log
	MessageType   isNetworkMessage_MessageType `protobuf_oneof:"message_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NetworkMessage) Reset() {
	*x = NetworkMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NetworkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMessage) ProtoMessage() {}

func (x *NetworkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMessage.ProtoReflect.Descriptor instead.
func (*NetworkMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkMessage) GetMessageType() isNetworkMessage_MessageType {
	if x != nil {
		return x.MessageType
	}
	return nil
}

func (x *NetworkMessage) GetAnnounce() *AnnounceMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_Announce); ok {
			return x.Announce
		}
	}
	return nil
}

func (x *NetworkMessage) GetPeerListRequest() *PeerListRequest {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_PeerListRequest); ok {
			return x.PeerListRequest
		}
	}
	return nil
}

func (x *NetworkMessage) GetPeerListResponse() *PeerListResponse {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_PeerListResponse); ok {
			return x.PeerListResponse
		}
	}
	return nil
}

func (x *NetworkMessage) GetHeartbeat() *HeartbeatMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_Heartbeat); ok {
			return x.Heartbeat
		}
	}
	return nil
}

func (x *NetworkMessage) GetGoodbye() *GoodbyeMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_Goodbye); ok {
			return x.Goodbye
		}
	}
	return nil
}

func (x *NetworkMessage) GetChunkRequest() *ChunkRequest {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_ChunkRequest); ok {
			return x.ChunkRequest
		}
	}
	return nil
}

func (x *NetworkMessage) GetChunkResponse() *ChunkResponse {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_ChunkResponse); ok {
			return x.ChunkResponse
		}
	}
	return nil
}

func (x *NetworkMessage) GetIntroduction() *IntroductionMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_Introduction); ok {
			return x.Introduction
		}
	}
	return nil
}

func (x *NetworkMessage) GetSignalRegister() *SignalRegisterMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_SignalRegister); ok {
			return x.SignalRegister
		}
	}
	return nil
}

func (x *NetworkMessage) GetSignalDownload() *SignalDownloadMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_SignalDownload); ok {
			return x.SignalDownload
		}
	}
	return nil
}

func (x *NetworkMessage) GetSignaling() *SignalingMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_Signaling); ok {
			return x.Signaling
		}
	}
	return nil
}

func (x *NetworkMessage) GetId() *IDMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_Id); ok {
			return x.Id
		}
	}
	return nil
}

func (x *NetworkMessage) GetLog() *LogMessage {
	if x != nil {
		if x, ok := x.MessageType.(*NetworkMessage_Log); ok {
			return x.Log
		}
	}
	return nil
}

type isNetworkMessage_MessageType interface {
	isNetworkMessage_MessageType()
}

type NetworkMessage_Announce struct {
	Announce *AnnounceMessage `protobuf:"bytes,1,opt,name=announce,proto3,oneof"`
}

type NetworkMessage_PeerListRequest struct {
	PeerListRequest *PeerListRequest `protobuf:"bytes,2,opt,name=peer_list_request,json=peerListRequest,proto3,oneof"`
}

type NetworkMessage_PeerListResponse struct {
	PeerListResponse *PeerListResponse `protobuf:"bytes,3,opt,name=peer_list_response,json=peerListResponse,proto3,oneof"`
}

type NetworkMessage_Heartbeat struct {
	Heartbeat *HeartbeatMessage `protobuf:"bytes,4,opt,name=heartbeat,proto3,oneof"`
}

type NetworkMessage_Goodbye struct {
	Goodbye *GoodbyeMessage `protobuf:"bytes,5,opt,name=goodbye,proto3,oneof"`
}

type NetworkMessage_ChunkRequest struct {
	ChunkRequest *ChunkRequest `protobuf:"bytes,6,opt,name=chunk_request,json=chunkRequest,proto3,oneof"`
}

type NetworkMessage_ChunkResponse struct {
	ChunkResponse *ChunkResponse `protobuf:"bytes,7,opt,name=chunk_response,json=chunkResponse,proto3,oneof"`
}

type NetworkMessage_Introduction struct {
	Introduction *IntroductionMessage `protobuf:"bytes,8,opt,name=introduction,proto3,oneof"`
}

type NetworkMessage_SignalRegister struct {
	SignalRegister *SignalRegisterMessage `protobuf:"bytes,9,opt,name=signal_register,json=signalRegister,proto3,oneof"`
}

type NetworkMessage_SignalDownload struct {
	SignalDownload *SignalDownloadMessage `protobuf:"bytes,10,opt,name=signal_download,json=signalDownload,proto3,oneof"`
}

type NetworkMessage_Signaling struct {
	Signaling *SignalingMessage `protobuf:"bytes,11,opt,name=signaling,proto3,oneof"`
}

type NetworkMessage_Id struct {
	Id *IDMessage `protobuf:"bytes,12,opt,name=id,proto3,oneof"`
}

type NetworkMessage_Log struct {
	Log *LogMessage `protobuf:"bytes,13,opt,name=log,proto3,oneof"`
}

func (*NetworkMessage_Announce) isNetworkMessage_MessageType() {}

func (*NetworkMessage_PeerListRequest) isNetworkMessage_MessageType() {}

func (*NetworkMessage_PeerListResponse) isNetworkMessage_MessageType() {}

func (*NetworkMessage_Heartbeat) isNetworkMessage_MessageType() {}

func (*NetworkMessage_Goodbye) isNetworkMessage_MessageType() {}

func (*NetworkMessage_ChunkRequest) isNetworkMessage_MessageType() {}

func (*NetworkMessage_ChunkResponse) isNetworkMessage_MessageType() {}

func (*NetworkMessage_Introduction) isNetworkMessage_MessageType() {}

func (*NetworkMessage_SignalRegister) isNetworkMessage_MessageType() {}

func (*NetworkMessage_SignalDownload) isNetworkMessage_MessageType() {}

func (*NetworkMessage_Signaling) isNetworkMessage_MessageType() {}

func (*NetworkMessage_Id) isNetworkMessage_MessageType() {}

func (*NetworkMessage_Log) isNetworkMessage_MessageType() {}

type AnnounceMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Files         []*FileInfo            `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnnounceMessage) Reset() {
	*x = AnnounceMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnnounceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceMessage) ProtoMessage() {}

func (x *AnnounceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceMessage.ProtoReflect.Descriptor instead.
func (*AnnounceMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *AnnounceMessage) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type PeerListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      string                 `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerListRequest) Reset() {
	*x = PeerListRequest{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerListRequest) ProtoMessage() {}

func (x *PeerListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerListRequest.ProtoReflect.Descriptor instead.
func (*PeerListRequest) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{2}
}

func (x *PeerListRequest) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

type PeerListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      string                 `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	TotalChunks   int32                  `protobuf:"varint,2,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	ChunkSize     int32                  `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	Peers         []*PeerInfo            `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerListResponse) Reset() {
	*x = PeerListResponse{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerListResponse) ProtoMessage() {}

func (x *PeerListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerListResponse.ProtoReflect.Descriptor instead.
func (*PeerListResponse) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *PeerListResponse) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *PeerListResponse) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *PeerListResponse) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *PeerListResponse) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type HeartbeatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeartbeatMessage) Reset() {
	*x = HeartbeatMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeartbeatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatMessage) ProtoMessage() {}

func (x *HeartbeatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatMessage.ProtoReflect.Descriptor instead.
func (*HeartbeatMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *HeartbeatMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// No fields are required for this message
// If recieved by anyone, delete that peer from the peer list
type GoodbyeMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoodbyeMessage) Reset() {
	*x = GoodbyeMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoodbyeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodbyeMessage) ProtoMessage() {}

func (x *GoodbyeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodbyeMessage.ProtoReflect.Descriptor instead.
func (*GoodbyeMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{5}
}

type ChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      string                 `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	ChunkIndex    int32                  `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	ChunkHash     string                 `protobuf:"bytes,3,opt,name=chunk_hash,json=chunkHash,proto3" json:"chunk_hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkRequest) Reset() {
	*x = ChunkRequest{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkRequest) ProtoMessage() {}

func (x *ChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkRequest.ProtoReflect.Descriptor instead.
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *ChunkRequest) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ChunkRequest) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *ChunkRequest) GetChunkHash() string {
	if x != nil {
		return x.ChunkHash
	}
	return ""
}

type ChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      string                 `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	ChunkIndex    int32                  `protobuf:"varint,2,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`
	ChunkData     []byte                 `protobuf:"bytes,3,opt,name=chunk_data,json=chunkData,proto3" json:"chunk_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkResponse) Reset() {
	*x = ChunkResponse{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkResponse) ProtoMessage() {}

func (x *ChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkResponse.ProtoReflect.Descriptor instead.
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{7}
}

func (x *ChunkResponse) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *ChunkResponse) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *ChunkResponse) GetChunkData() []byte {
	if x != nil {
		return x.ChunkData
	}
	return nil
}

// chunks_map: Vector of 0's and 1's signifying which chunks the peer has according to the index
type IntroductionMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileHash      string                 `protobuf:"bytes,1,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	ChunksMap     []int32                `protobuf:"varint,2,rep,packed,name=chunks_map,json=chunksMap,proto3" json:"chunks_map,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntroductionMessage) Reset() {
	*x = IntroductionMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntroductionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntroductionMessage) ProtoMessage() {}

func (x *IntroductionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntroductionMessage.ProtoReflect.Descriptor instead.
func (*IntroductionMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *IntroductionMessage) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *IntroductionMessage) GetChunksMap() []int32 {
	if x != nil {
		return x.ChunksMap
	}
	return nil
}

// Helper Msgs
type PeerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *PeerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FileInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileHash      string                 `protobuf:"bytes,2,opt,name=file_hash,json=fileHash,proto3" json:"file_hash,omitempty"`
	FileSize      int64                  `protobuf:"varint,3,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	TotalChunks   int32                  `protobuf:"varint,4,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`
	ChunkSize     int32                  `protobuf:"varint,5,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetFileHash() string {
	if x != nil {
		return x.FileHash
	}
	return ""
}

func (x *FileInfo) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FileInfo) GetTotalChunks() int32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

func (x *FileInfo) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

type SignalRegisterMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalRegisterMessage) Reset() {
	*x = SignalRegisterMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalRegisterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRegisterMessage) ProtoMessage() {}

func (x *SignalRegisterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRegisterMessage.ProtoReflect.Descriptor instead.
func (*SignalRegisterMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *SignalRegisterMessage) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

type SignalDownloadMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalDownloadMessage) Reset() {
	*x = SignalDownloadMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalDownloadMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalDownloadMessage) ProtoMessage() {}

func (x *SignalDownloadMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalDownloadMessage.ProtoReflect.Descriptor instead.
func (*SignalDownloadMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{12}
}

func (x *SignalDownloadMessage) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

// WebRTC connection messages
type SignalingMessage struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	SourcePeerId string                 `protobuf:"bytes,1,opt,name=source_peer_id,json=sourcePeerId,proto3" json:"source_peer_id,omitempty"`
	TargetPeerId string                 `protobuf:"bytes,2,opt,name=target_peer_id,json=targetPeerId,proto3" json:"target_peer_id,omitempty"`
	// Types that are valid to be assigned to Message:
	//
	//	*SignalingMessage_Offer
	//	*SignalingMessage_Answer
	//	*SignalingMessage_IceCandidate
	Message       isSignalingMessage_Message `protobuf_oneof:"message"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignalingMessage) Reset() {
	*x = SignalingMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalingMessage) ProtoMessage() {}

func (x *SignalingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalingMessage.ProtoReflect.Descriptor instead.
func (*SignalingMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{13}
}

func (x *SignalingMessage) GetSourcePeerId() string {
	if x != nil {
		return x.SourcePeerId
	}
	return ""
}

func (x *SignalingMessage) GetTargetPeerId() string {
	if x != nil {
		return x.TargetPeerId
	}
	return ""
}

func (x *SignalingMessage) GetMessage() isSignalingMessage_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignalingMessage) GetOffer() *Offer {
	if x != nil {
		if x, ok := x.Message.(*SignalingMessage_Offer); ok {
			return x.Offer
		}
	}
	return nil
}

func (x *SignalingMessage) GetAnswer() *Answer {
	if x != nil {
		if x, ok := x.Message.(*SignalingMessage_Answer); ok {
			return x.Answer
		}
	}
	return nil
}

func (x *SignalingMessage) GetIceCandidate() *IceCandidate {
	if x != nil {
		if x, ok := x.Message.(*SignalingMessage_IceCandidate); ok {
			return x.IceCandidate
		}
	}
	return nil
}

type isSignalingMessage_Message interface {
	isSignalingMessage_Message()
}

type SignalingMessage_Offer struct {
	Offer *Offer `protobuf:"bytes,3,opt,name=offer,proto3,oneof"`
}

type SignalingMessage_Answer struct {
	Answer *Answer `protobuf:"bytes,4,opt,name=answer,proto3,oneof"`
}

type SignalingMessage_IceCandidate struct {
	IceCandidate *IceCandidate `protobuf:"bytes,5,opt,name=ice_candidate,json=iceCandidate,proto3,oneof"`
}

func (*SignalingMessage_Offer) isSignalingMessage_Message() {}

func (*SignalingMessage_Answer) isSignalingMessage_Message() {}

func (*SignalingMessage_IceCandidate) isSignalingMessage_Message() {}

type Offer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sdp           string                 `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Offer) Reset() {
	*x = Offer{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Offer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Offer) ProtoMessage() {}

func (x *Offer) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Offer.ProtoReflect.Descriptor instead.
func (*Offer) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{14}
}

func (x *Offer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type Answer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sdp           string                 `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{15}
}

func (x *Answer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

type IceCandidate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Candidate     string                 `protobuf:"bytes,1,opt,name=candidate,proto3" json:"candidate,omitempty"`
	SdpMid        string                 `protobuf:"bytes,2,opt,name=sdp_mid,json=sdpMid,proto3" json:"sdp_mid,omitempty"`
	SdpMlineIndex uint32                 `protobuf:"varint,3,opt,name=sdp_mline_index,json=sdpMlineIndex,proto3" json:"sdp_mline_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IceCandidate) Reset() {
	*x = IceCandidate{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IceCandidate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IceCandidate) ProtoMessage() {}

func (x *IceCandidate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IceCandidate.ProtoReflect.Descriptor instead.
func (*IceCandidate) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{16}
}

func (x *IceCandidate) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *IceCandidate) GetSdpMid() string {
	if x != nil {
		return x.SdpMid
	}
	return ""
}

func (x *IceCandidate) GetSdpMlineIndex() uint32 {
	if x != nil {
		return x.SdpMlineIndex
	}
	return 0
}

type IDMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IDMessage) Reset() {
	*x = IDMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IDMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDMessage) ProtoMessage() {}

func (x *IDMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDMessage.ProtoReflect.Descriptor instead.
func (*IDMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{17}
}

func (x *IDMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type LogMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_internal_shared_protocol_protocol_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_internal_shared_protocol_protocol_proto_rawDescGZIP(), []int{18}
}

func (x *LogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_internal_shared_protocol_protocol_proto protoreflect.FileDescriptor

const file_internal_shared_protocol_protocol_proto_rawDesc = "" +
	"\n" +
	"'internal/shared/protocol/protocol.proto\x12\bprotocol\"\xcb\x06\n" +
	"\x0eNetworkMessage\x127\n" +
	"\bannounce\x18\x01 \x01(\v2\x19.protocol.AnnounceMessageH\x00R\bannounce\x12G\n" +
	"\x11peer_list_request\x18\x02 \x01(\v2\x19.protocol.PeerListRequestH\x00R\x0fpeerListRequest\x12J\n" +
	"\x12peer_list_response\x18\x03 \x01(\v2\x1a.protocol.PeerListResponseH\x00R\x10peerListResponse\x12:\n" +
	"\theartbeat\x18\x04 \x01(\v2\x1a.protocol.HeartbeatMessageH\x00R\theartbeat\x124\n" +
	"\agoodbye\x18\x05 \x01(\v2\x18.protocol.GoodbyeMessageH\x00R\agoodbye\x12=\n" +
	"\rchunk_request\x18\x06 \x01(\v2\x16.protocol.ChunkRequestH\x00R\fchunkRequest\x12@\n" +
	"\x0echunk_response\x18\a \x01(\v2\x17.protocol.ChunkResponseH\x00R\rchunkResponse\x12C\n" +
	"\fintroduction\x18\b \x01(\v2\x1d.protocol.IntroductionMessageH\x00R\fintroduction\x12J\n" +
	"\x0fsignal_register\x18\t \x01(\v2\x1f.protocol.SignalRegisterMessageH\x00R\x0esignalRegister\x12J\n" +
	"\x0fsignal_download\x18\n" +
	" \x01(\v2\x1f.protocol.SignalDownloadMessageH\x00R\x0esignalDownload\x12:\n" +
	"\tsignaling\x18\v \x01(\v2\x1a.protocol.SignalingMessageH\x00R\tsignaling\x12%\n" +
	"\x02id\x18\f \x01(\v2\x13.protocol.IDMessageH\x00R\x02id\x12(\n" +
	"\x03log\x18\r \x01(\v2\x14.protocol.LogMessageH\x00R\x03logB\x0e\n" +
	"\fmessage_type\";\n" +
	"\x0fAnnounceMessage\x12(\n" +
	"\x05files\x18\x01 \x03(\v2\x12.protocol.FileInfoR\x05files\".\n" +
	"\x0fPeerListRequest\x12\x1b\n" +
	"\tfile_hash\x18\x01 \x01(\tR\bfileHash\"\x9b\x01\n" +
	"\x10PeerListResponse\x12\x1b\n" +
	"\tfile_hash\x18\x01 \x01(\tR\bfileHash\x12!\n" +
	"\ftotal_chunks\x18\x02 \x01(\x05R\vtotalChunks\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x03 \x01(\x05R\tchunkSize\x12(\n" +
	"\x05peers\x18\x04 \x03(\v2\x12.protocol.PeerInfoR\x05peers\"0\n" +
	"\x10HeartbeatMessage\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\"\x10\n" +
	"\x0eGoodbyeMessage\"k\n" +
	"\fChunkRequest\x12\x1b\n" +
	"\tfile_hash\x18\x01 \x01(\tR\bfileHash\x12\x1f\n" +
	"\vchunk_index\x18\x02 \x01(\x05R\n" +
	"chunkIndex\x12\x1d\n" +
	"\n" +
	"chunk_hash\x18\x03 \x01(\tR\tchunkHash\"l\n" +
	"\rChunkResponse\x12\x1b\n" +
	"\tfile_hash\x18\x01 \x01(\tR\bfileHash\x12\x1f\n" +
	"\vchunk_index\x18\x02 \x01(\x05R\n" +
	"chunkIndex\x12\x1d\n" +
	"\n" +
	"chunk_data\x18\x03 \x01(\fR\tchunkData\"Q\n" +
	"\x13IntroductionMessage\x12\x1b\n" +
	"\tfile_hash\x18\x01 \x01(\tR\bfileHash\x12\x1d\n" +
	"\n" +
	"chunks_map\x18\x02 \x03(\x05R\tchunksMap\"\x1a\n" +
	"\bPeerInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"\xa3\x01\n" +
	"\bFileInfo\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\x12\x1b\n" +
	"\tfile_hash\x18\x02 \x01(\tR\bfileHash\x12\x1b\n" +
	"\tfile_size\x18\x03 \x01(\x03R\bfileSize\x12!\n" +
	"\ftotal_chunks\x18\x04 \x01(\x05R\vtotalChunks\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x05 \x01(\x05R\tchunkSize\"4\n" +
	"\x15SignalRegisterMessage\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\"4\n" +
	"\x15SignalDownloadMessage\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\"\xfd\x01\n" +
	"\x10SignalingMessage\x12$\n" +
	"\x0esource_peer_id\x18\x01 \x01(\tR\fsourcePeerId\x12$\n" +
	"\x0etarget_peer_id\x18\x02 \x01(\tR\ftargetPeerId\x12'\n" +
	"\x05offer\x18\x03 \x01(\v2\x0f.protocol.OfferH\x00R\x05offer\x12*\n" +
	"\x06answer\x18\x04 \x01(\v2\x10.protocol.AnswerH\x00R\x06answer\x12=\n" +
	"\rice_candidate\x18\x05 \x01(\v2\x16.protocol.IceCandidateH\x00R\ficeCandidateB\t\n" +
	"\amessage\"\x19\n" +
	"\x05Offer\x12\x10\n" +
	"\x03sdp\x18\x01 \x01(\tR\x03sdp\"\x1a\n" +
	"\x06Answer\x12\x10\n" +
	"\x03sdp\x18\x01 \x01(\tR\x03sdp\"m\n" +
	"\fIceCandidate\x12\x1c\n" +
	"\tcandidate\x18\x01 \x01(\tR\tcandidate\x12\x17\n" +
	"\asdp_mid\x18\x02 \x01(\tR\x06sdpMid\x12&\n" +
	"\x0fsdp_mline_index\x18\x03 \x01(\rR\rsdpMlineIndex\"\x1b\n" +
	"\tIDMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\"&\n" +
	"\n" +
	"LogMessage\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessageBBZ@github.com/rudransh-shrivastava/peer-it/internal/shared/protocolb\x06proto3"

var (
	file_internal_shared_protocol_protocol_proto_rawDescOnce sync.Once
	file_internal_shared_protocol_protocol_proto_rawDescData []byte
)

func file_internal_shared_protocol_protocol_proto_rawDescGZIP() []byte {
	file_internal_shared_protocol_protocol_proto_rawDescOnce.Do(func() {
		file_internal_shared_protocol_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_shared_protocol_protocol_proto_rawDesc), len(file_internal_shared_protocol_protocol_proto_rawDesc)))
	})
	return file_internal_shared_protocol_protocol_proto_rawDescData
}

var file_internal_shared_protocol_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_internal_shared_protocol_protocol_proto_goTypes = []any{
	(*NetworkMessage)(nil),        // 0: protocol.NetworkMessage
	(*AnnounceMessage)(nil),       // 1: protocol.AnnounceMessage
	(*PeerListRequest)(nil),       // 2: protocol.PeerListRequest
	(*PeerListResponse)(nil),      // 3: protocol.PeerListResponse
	(*HeartbeatMessage)(nil),      // 4: protocol.HeartbeatMessage
	(*GoodbyeMessage)(nil),        // 5: protocol.GoodbyeMessage
	(*ChunkRequest)(nil),          // 6: protocol.ChunkRequest
	(*ChunkResponse)(nil),         // 7: protocol.ChunkResponse
	(*IntroductionMessage)(nil),   // 8: protocol.IntroductionMessage
	(*PeerInfo)(nil),              // 9: protocol.PeerInfo
	(*FileInfo)(nil),              // 10: protocol.FileInfo
	(*SignalRegisterMessage)(nil), // 11: protocol.SignalRegisterMessage
	(*SignalDownloadMessage)(nil), // 12: protocol.SignalDownloadMessage
	(*SignalingMessage)(nil),      // 13: protocol.SignalingMessage
	(*Offer)(nil),                 // 14: protocol.Offer
	(*Answer)(nil),                // 15: protocol.Answer
	(*IceCandidate)(nil),          // 16: protocol.IceCandidate
	(*IDMessage)(nil),             // 17: protocol.IDMessage
	(*LogMessage)(nil),            // 18: protocol.LogMessage
}
var file_internal_shared_protocol_protocol_proto_depIdxs = []int32{
	1,  // 0: protocol.NetworkMessage.announce:type_name -> protocol.AnnounceMessage
	2,  // 1: protocol.NetworkMessage.peer_list_request:type_name -> protocol.PeerListRequest
	3,  // 2: protocol.NetworkMessage.peer_list_response:type_name -> protocol.PeerListResponse
	4,  // 3: protocol.NetworkMessage.heartbeat:type_name -> protocol.HeartbeatMessage
	5,  // 4: protocol.NetworkMessage.goodbye:type_name -> protocol.GoodbyeMessage
	6,  // 5: protocol.NetworkMessage.chunk_request:type_name -> protocol.ChunkRequest
	7,  // 6: protocol.NetworkMessage.chunk_response:type_name -> protocol.ChunkResponse
	8,  // 7: protocol.NetworkMessage.introduction:type_name -> protocol.IntroductionMessage
	11, // 8: protocol.NetworkMessage.signal_register:type_name -> protocol.SignalRegisterMessage
	12, // 9: protocol.NetworkMessage.signal_download:type_name -> protocol.SignalDownloadMessage
	13, // 10: protocol.NetworkMessage.signaling:type_name -> protocol.SignalingMessage
	17, // 11: protocol.NetworkMessage.id:type_name -> protocol.IDMessage
	18, // 12: protocol.NetworkMessage.log:type_name -> protocol.LogMessage
	10, // 13: protocol.AnnounceMessage.files:type_name -> protocol.FileInfo
	9,  // 14: protocol.PeerListResponse.peers:type_name -> protocol.PeerInfo
	14, // 15: protocol.SignalingMessage.offer:type_name -> protocol.Offer
	15, // 16: protocol.SignalingMessage.answer:type_name -> protocol.Answer
	16, // 17: protocol.SignalingMessage.ice_candidate:type_name -> protocol.IceCandidate
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_internal_shared_protocol_protocol_proto_init() }
func file_internal_shared_protocol_protocol_proto_init() {
	if File_internal_shared_protocol_protocol_proto != nil {
		return
	}
	file_internal_shared_protocol_protocol_proto_msgTypes[0].OneofWrappers = []any{
		(*NetworkMessage_Announce)(nil),
		(*NetworkMessage_PeerListRequest)(nil),
		(*NetworkMessage_PeerListResponse)(nil),
		(*NetworkMessage_Heartbeat)(nil),
		(*NetworkMessage_Goodbye)(nil),
		(*NetworkMessage_ChunkRequest)(nil),
		(*NetworkMessage_ChunkResponse)(nil),
		(*NetworkMessage_Introduction)(nil),
		(*NetworkMessage_SignalRegister)(nil),
		(*NetworkMessage_SignalDownload)(nil),
		(*NetworkMessage_Signaling)(nil),
		(*NetworkMessage_Id)(nil),
		(*NetworkMessage_Log)(nil),
	}
	file_internal_shared_protocol_protocol_proto_msgTypes[13].OneofWrappers = []any{
		(*SignalingMessage_Offer)(nil),
		(*SignalingMessage_Answer)(nil),
		(*SignalingMessage_IceCandidate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_shared_protocol_protocol_proto_rawDesc), len(file_internal_shared_protocol_protocol_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_shared_protocol_protocol_proto_goTypes,
		DependencyIndexes: file_internal_shared_protocol_protocol_proto_depIdxs,
		MessageInfos:      file_internal_shared_protocol_protocol_proto_msgTypes,
	}.Build()
	File_internal_shared_protocol_protocol_proto = out.File
	file_internal_shared_protocol_protocol_proto_goTypes = nil
	file_internal_shared_protocol_protocol_proto_depIdxs = nil
}
